/*
Navicat MySQL Data Transfer

Source Server         : darly
Source Server Version : 50717
Source Host           : 10.10.15.110:3306
Source Database       : darlybase

Target Server Type    : MYSQL
Target Server Version : 50717
File Encoding         : 65001

Date: 2017-11-24 18:23:26
*/

SET FOREIGN_KEY_CHECKS=0;

-- ----------------------------
-- Table structure for study_dic
-- ----------------------------
DROP TABLE IF EXISTS `study_dic`;
CREATE TABLE `study_dic` (
  `ID` varchar(64) COLLATE utf8_unicode_ci NOT NULL,
  `CODE` varchar(100) COLLATE utf8_unicode_ci DEFAULT NULL COMMENT '编码',
  `NAME` varchar(100) COLLATE utf8_unicode_ci DEFAULT NULL COMMENT '名称',
  `REMARK` text COLLATE utf8_unicode_ci COMMENT '标记',
  PRIMARY KEY (`ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci ROW_FORMAT=DYNAMIC;

-- ----------------------------
-- Records of study_dic
-- ----------------------------
INSERT INTO `study_dic` VALUES ('1304260822434698b246dca4ffc486a0', '0', '如何建立网站？', '    <div>\r\n        <h3>网站建立 <small>建立网站的步骤和方法</small></h3>\r\n        <p class=\"text-left\">系统为Spring MVC + Spring Security + Mybatis + BootStrap 进行开发的一个小项目。</p>\r\n        <p class=\"text-left\">Spring MVC + Spring Security + Mybatis  框架网络上有介绍，这里进行简单操作。</p>\r\n        <p class=\"text-left\">第一步：打开IDEA（注意是Pro版本，否则没有选项）进行建立项目：</p>\r\n        <p class=\"text-left\">第二步：配置pom.xml：<code>&lt;pom.xml&gt;</code></p>\r\n        <pre>\r\n&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\"&gt;\r\n    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\r\n    &lt;groupId&gt;cn.com.darly.sap&lt;/groupId&gt;\r\n    &lt;artifactId&gt;Security-System&lt;/artifactId&gt;\r\n    &lt;packaging&gt;war&lt;/packaging&gt;\r\n    &lt;version&gt;0.0.1&lt;/version&gt;\r\n    &lt;name&gt;Security-System&lt;/name&gt;\r\n    &lt;description&gt;构造自己的安全管理项目&lt;/description&gt;\r\n    &lt;developers&gt;\r\n        &lt;developer&gt;\r\n            &lt;id&gt;darly&lt;/id&gt;\r\n            &lt;name&gt;张宇辉&lt;/name&gt;\r\n            &lt;email&gt;darlyyuhui@hotmail.com&lt;/email&gt;\r\n        &lt;/developer&gt;\r\n    &lt;/developers&gt;\r\n    &lt;properties&gt;\r\n        &lt;jdk.version&gt;1.8&lt;/jdk.version&gt;\r\n        &lt;spring.version&gt;4.0.5.RELEASE&lt;/spring.version&gt;\r\n        &lt;spring.security.version&gt;4.0.0.RELEASE&lt;/spring.security.version&gt;\r\n        &lt;jstl.version&gt;1.2&lt;/jstl.version&gt;\r\n        &lt;!-- mybatis版本号 --&gt;\r\n        &lt;mybatis.version&gt;3.1.1&lt;/mybatis.version&gt;\r\n        &lt;maven.compiler.source&gt;1.8&lt;/maven.compiler.source&gt;\r\n        &lt;maven.compiler.target&gt;1.8&lt;/maven.compiler.target&gt;\r\n    &lt;/properties&gt;\r\n\r\n    &lt;dependencies&gt;\r\n        &lt;!-- Spring  dependencies --&gt;\r\n        &lt;dependency&gt;\r\n            &lt;groupId&gt;org.springframework&lt;/groupId&gt;\r\n            &lt;artifactId&gt;spring-core&lt;/artifactId&gt;\r\n            &lt;version&gt;${spring.version}&lt;/version&gt;\r\n        &lt;/dependency&gt;\r\n        &lt;dependency&gt;\r\n            &lt;groupId&gt;org.springframework&lt;/groupId&gt;\r\n            &lt;artifactId&gt;spring-web&lt;/artifactId&gt;\r\n            &lt;version&gt;${spring.version}&lt;/version&gt;\r\n        &lt;/dependency&gt;\r\n        &lt;dependency&gt;\r\n            &lt;groupId&gt;org.springframework&lt;/groupId&gt;\r\n            &lt;artifactId&gt;spring-context-support&lt;/artifactId&gt;\r\n            &lt;version&gt;${spring.version}&lt;/version&gt;\r\n        &lt;/dependency&gt;\r\n        &lt;dependency&gt;\r\n            &lt;groupId&gt;org.springframework&lt;/groupId&gt;\r\n            &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;\r\n            &lt;version&gt;${spring.version}&lt;/version&gt;\r\n        &lt;/dependency&gt;\r\n        &lt;dependency&gt;\r\n            &lt;groupId&gt;org.springframework&lt;/groupId&gt;\r\n            &lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt;\r\n            &lt;version&gt;${spring.version}&lt;/version&gt;\r\n        &lt;/dependency&gt;\r\n        &lt;!-- Spring  dependencies --&gt;\r\n        &lt;!-- Spring Security --&gt;\r\n        &lt;dependency&gt;\r\n            &lt;groupId&gt;org.springframework.security&lt;/groupId&gt;\r\n            &lt;artifactId&gt;spring-security-web&lt;/artifactId&gt;\r\n            &lt;version&gt;${spring.security.version}&lt;/version&gt;\r\n        &lt;/dependency&gt;\r\n        &lt;dependency&gt;\r\n            &lt;groupId&gt;org.springframework.security&lt;/groupId&gt;\r\n            &lt;artifactId&gt;spring-security-config&lt;/artifactId&gt;\r\n            &lt;version&gt;${spring.security.version}&lt;/version&gt;\r\n        &lt;/dependency&gt;\r\n        &lt;!--加密類--&gt;\r\n        &lt;dependency&gt;\r\n            &lt;groupId&gt;commons-codec&lt;/groupId&gt;\r\n            &lt;artifactId&gt;commons-codec&lt;/artifactId&gt;\r\n            &lt;version&gt;1.7&lt;/version&gt;\r\n        &lt;/dependency&gt;\r\n        &lt;!-- Spring Security --&gt;\r\n        &lt;!-- jstl for jsp page --&gt;\r\n        &lt;dependency&gt;\r\n            &lt;groupId&gt;jstl&lt;/groupId&gt;\r\n            &lt;artifactId&gt;jstl&lt;/artifactId&gt;\r\n            &lt;version&gt;${jstl.version}&lt;/version&gt;\r\n        &lt;/dependency&gt;\r\n        &lt;!-- jstl for jsp page --&gt;\r\n        &lt;!--servlet 配置--&gt;\r\n        &lt;dependency&gt;\r\n            &lt;groupId&gt;javax.servlet&lt;/groupId&gt;\r\n            &lt;artifactId&gt;javax.servlet-api&lt;/artifactId&gt;\r\n            &lt;version&gt;4.0.0&lt;/version&gt;\r\n        &lt;/dependency&gt;\r\n        &lt;dependency&gt;\r\n            &lt;groupId&gt;javax.servlet.jsp&lt;/groupId&gt;\r\n            &lt;artifactId&gt;javax.servlet.jsp-api&lt;/artifactId&gt;\r\n            &lt;version&gt;2.3.1&lt;/version&gt;\r\n        &lt;/dependency&gt;\r\n        &lt;dependency&gt;\r\n            &lt;groupId&gt;javax.servlet&lt;/groupId&gt;\r\n            &lt;artifactId&gt;jstl&lt;/artifactId&gt;\r\n            &lt;version&gt;1.2&lt;/version&gt;\r\n        &lt;/dependency&gt;\r\n        &lt;!--servlet 配置--&gt;\r\n        &lt;!-- mybatis核心包 --&gt;\r\n        &lt;dependency&gt;\r\n            &lt;groupId&gt;org.mybatis&lt;/groupId&gt;\r\n            &lt;artifactId&gt;mybatis&lt;/artifactId&gt;\r\n            &lt;version&gt;${mybatis.version}&lt;/version&gt;\r\n        &lt;/dependency&gt;\r\n        &lt;!-- mybatis/spring包 --&gt;\r\n        &lt;dependency&gt;\r\n            &lt;groupId&gt;org.mybatis&lt;/groupId&gt;\r\n            &lt;artifactId&gt;mybatis-spring&lt;/artifactId&gt;\r\n            &lt;version&gt;1.2.2&lt;/version&gt;\r\n        &lt;/dependency&gt;\r\n        &lt;dependency&gt;\r\n            &lt;groupId&gt;commons-dbcp&lt;/groupId&gt;\r\n            &lt;artifactId&gt;commons-dbcp&lt;/artifactId&gt;\r\n            &lt;version&gt;1.2.2&lt;/version&gt;\r\n        &lt;/dependency&gt;\r\n\r\n        &lt;!-- mybatis核心包 --&gt;\r\n        &lt;!--日志系统配置--&gt;\r\n        &lt;dependency&gt;\r\n            &lt;groupId&gt;org.slf4j&lt;/groupId&gt;\r\n            &lt;artifactId&gt;slf4j-api&lt;/artifactId&gt;\r\n            &lt;version&gt;1.7.21&lt;/version&gt;\r\n        &lt;/dependency&gt;\r\n        &lt;dependency&gt;\r\n            &lt;groupId&gt;org.slf4j&lt;/groupId&gt;\r\n            &lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt;\r\n            &lt;version&gt;1.7.21&lt;/version&gt;\r\n        &lt;/dependency&gt;\r\n        &lt;dependency&gt;\r\n            &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;\r\n            &lt;artifactId&gt;jackson-annotations&lt;/artifactId&gt;\r\n            &lt;version&gt;2.8.0&lt;/version&gt;\r\n        &lt;/dependency&gt;\r\n        &lt;dependency&gt;\r\n            &lt;groupId&gt;commons-io&lt;/groupId&gt;\r\n            &lt;artifactId&gt;commons-io&lt;/artifactId&gt;\r\n            &lt;version&gt;2.5&lt;/version&gt;\r\n        &lt;/dependency&gt;\r\n        &lt;!--日志系统配置--&gt;\r\n        &lt;!--对象转换为JSON--&gt;\r\n        &lt;dependency&gt;\r\n            &lt;groupId&gt;net.sf.json-lib&lt;/groupId&gt;\r\n            &lt;artifactId&gt;json-lib&lt;/artifactId&gt;\r\n            &lt;classifier&gt;jdk15&lt;/classifier&gt;\r\n            &lt;version&gt;2.4&lt;/version&gt;\r\n        &lt;/dependency&gt;\r\n        &lt;!--Json 文件Gson--&gt;\r\n        &lt;dependency&gt;\r\n            &lt;groupId&gt;com.google.code.gson&lt;/groupId&gt;\r\n            &lt;artifactId&gt;gson&lt;/artifactId&gt;\r\n            &lt;version&gt;2.8.0&lt;/version&gt;\r\n        &lt;/dependency&gt;\r\n        &lt;dependency&gt;\r\n            &lt;groupId&gt;com.google.guava&lt;/groupId&gt;\r\n            &lt;artifactId&gt;guava&lt;/artifactId&gt;\r\n            &lt;version&gt;19.0&lt;/version&gt;\r\n        &lt;/dependency&gt;\r\n        &lt;!--数据库连接库--&gt;\r\n        &lt;dependency&gt;\r\n            &lt;groupId&gt;mysql&lt;/groupId&gt;\r\n            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;\r\n            &lt;version&gt;5.1.14&lt;/version&gt;\r\n        &lt;/dependency&gt;\r\n        &lt;!--数据库连接库--&gt;\r\n        &lt;dependency&gt;\r\n            &lt;groupId&gt;junit&lt;/groupId&gt;\r\n            &lt;artifactId&gt;junit&lt;/artifactId&gt;\r\n            &lt;version&gt;3.8.1&lt;/version&gt;\r\n            &lt;scope&gt;test&lt;/scope&gt;\r\n        &lt;/dependency&gt;\r\n        &lt;!--缓存管理--&gt;\r\n        &lt;dependency&gt;\r\n            &lt;groupId&gt;net.sf.ehcache&lt;/groupId&gt;\r\n            &lt;artifactId&gt;ehcache-core&lt;/artifactId&gt;\r\n            &lt;version&gt;2.6.11&lt;/version&gt;\r\n        &lt;/dependency&gt;\r\n        &lt;dependency&gt;\r\n            &lt;groupId&gt;net.sf.ehcache&lt;/groupId&gt;\r\n            &lt;artifactId&gt;ehcache-terracotta&lt;/artifactId&gt;\r\n            &lt;version&gt;2.6.11&lt;/version&gt;\r\n        &lt;/dependency&gt;\r\n        &lt;dependency&gt;\r\n            &lt;groupId&gt;dom4j&lt;/groupId&gt;\r\n            &lt;artifactId&gt;dom4j&lt;/artifactId&gt;\r\n            &lt;version&gt;1.6.1&lt;/version&gt;\r\n        &lt;/dependency&gt;\r\n    &lt;/dependencies&gt;\r\n    &lt;build&gt;\r\n        &lt;finalName&gt;Security-System&lt;/finalName&gt;\r\n        &lt;resources&gt;\r\n            &lt;resource&gt;\r\n                &lt;directory&gt;src/main/java&lt;/directory&gt;\r\n                &lt;includes&gt;\r\n                    &lt;include&gt;**/*.xml&lt;/include&gt;\r\n                &lt;/includes&gt;\r\n                &lt;filtering&gt;true&lt;/filtering&gt;\r\n            &lt;/resource&gt;\r\n        &lt;/resources&gt;\r\n    &lt;/build&gt;\r\n&lt;/project&gt;\r\n        </pre>\r\n    </div>');
INSERT INTO `study_dic` VALUES ('1304260822434698b246dca4ffc486a1', '1', '如何建立缓存机制？', '    <div>\r\n        <h3>缓存建立 <small>缓存建立的步骤和方法</small></h3>\r\n        <p class=\"text-left\">项目缓存使用ehcache框架进行缓存</p>\r\n        <p class=\"text-left\">第一步：pom.xml文件中添加net.sf.ehcache架包并构建基础缓存java文件。</p>\r\n        <pre>\r\nBaseCache.java\r\nCache.java\r\nCacheFactory.java\r\nCacheListener.java\r\nCacheManagerFactoryBean.java\r\nEhcacheImplementation.java\r\n        </pre>\r\n        <p class=\"text-left\">第二步：配置资源文件：<code>&lt;sap-ehcache.xml&gt;</code></p>\r\n        <pre>\r\n&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\r\n&lt;beans xmlns=\"http://www.springframework.org/schema/beans\"\r\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd\"\r\n       default-autowire=\"byName\" default-lazy-init=\"false\"&gt;\r\n\r\n    &lt;description&gt;EhCache配置文件&lt;/description&gt;\r\n    &lt;bean id=\"ehcacheManager\" class=\"cn.com.darly.sysbase.framework.cache.CacheManagerFactoryBean\"&gt;\r\n        &lt;property name=\"configLocation\" value=\"classpath:ehcache.xml\" /&gt;\r\n        &lt;!--&lt;property name=\"diskStoreLocation\" value=\"${ssms.root}/WEB-INF/cache\"/&gt;--&gt;\r\n    &lt;/bean&gt;\r\n    &lt;bean id=\"ehcacheImpl\" class=\"cn.com.darly.sysbase.framework.cache.EhcacheImplementation\"/&gt;\r\n                &lt;!-- 数据字典 --&gt;\r\n    &lt;bean id=\"dicCache\" class=\"cn.com.darly.sysbase.dictionary.cache.DicCache\"/&gt;\r\n    &lt;bean name=\"cacheFactory\" class=\"cn.com.darly.sysbase.framework.cache.CacheFactory\"&gt;\r\n        &lt;property name=\"items\"&gt;\r\n            &lt;list&gt;\r\n                &lt;ref local=\"dicCache\"/&gt;\r\n            &lt;/list&gt;\r\n        &lt;/property&gt;\r\n    &lt;/bean&gt;\r\n&lt;/beans&gt;\r\n        </pre>\r\n        <p class=\"text-left\">第三步：配置资源文件：<code>&lt;ehcache.xml&gt;</code></p>\r\n        <pre>\r\n&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\r\n&lt;ehcache xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n             xsi:noNamespaceSchemaLocation=\"ehcache.xsd\"\r\n             updateCheck=\"true\" monitoring=\"autodetect\"\r\n             dynamicConfig=\"true\"&gt;\r\n\r\n    &lt;!--\r\n    name：Cache的唯一标识\r\n    maxElementsInMemory：内存中最大缓存对象数\r\n    maxElementsOnDisk：磁盘中最大缓存对象数，若是0表示无穷大\r\n    eternal：Element是否永久有效，一但设置了，timeout将不起作用\r\n    overflowToDisk：配置此属性，当内存中Element数量达到maxElementsInMemory时，Ehcache将会Element写到磁盘中\r\n    timeToIdleSeconds：设置Element在失效前的允许闲置时间。仅当element不是永久有效时使用，可选属性，默认值是0，也就是可闲置时间无穷大\r\n    timeToLiveSeconds：设置Element在失效前允许存活时间。最大时间介于创建时间和失效时间之间。仅当element不是永久有效时使用，默认是0.，也就是element存活时间无穷大\r\n    diskPersistent：是否缓存虚拟机重启期数据\r\n    diskExpiryThreadIntervalSeconds：磁盘失效线程运行时间间隔，默认是120秒\r\n    diskSpoolBufferSizeMB：这个参数设置DiskStore（磁盘缓存）的缓存区大小。默认是30MB。每个Cache都应该有自己的一个缓冲区\r\n    memoryStoreEvictionPolicy：当达到maxElementsInMemory限制时，Ehcache将会根据指定的策略去清理内存。默认策略是LRU（最近最少使用）。你可以设置为FIFO（先进先出）或是LFU（较少使用）\r\n    --&gt;\r\n        &lt;defaultCache\r\n                overflowToDisk=\"true\"\r\n                eternal=\"false\"\r\n                timeToIdleSeconds=\"1200\"\r\n                timeToLiveSeconds=\"1200\"&gt;\r\n        &lt;/defaultCache&gt;\r\n\r\n        &lt;cache name=\"dicCache\"\r\n               eternal=\"true\"\r\n               maxElementsInMemory=\"10000\"\r\n               maxElementsOnDisk=\"500000\" diskPersistent=\"true\" diskExpiryThreadIntervalSeconds=\"300\"\r\n               diskSpoolBufferSizeMB=\"300\" memoryStoreEvictionPolicy=\"FIFO\"&gt;\r\n        &lt;/cache&gt;\r\n\r\n        &lt;cache name=\"analyzeCache\"\r\n               eternal=\"true\"\r\n               maxElementsInMemory=\"10000\"\r\n               maxElementsOnDisk=\"5000000\" diskPersistent=\"false\" diskExpiryThreadIntervalSeconds=\"300\"\r\n               diskSpoolBufferSizeMB=\"300\" memoryStoreEvictionPolicy=\"FIFO\"&gt;\r\n        &lt;/cache&gt;\r\n&lt;/ehcache&gt;\r\n        </pre>\r\n        <p class=\"text-left\">第四步：根据需要缓存的地方进行编辑Cache.java文件</p>\r\n        <pre>\r\npackage cn.com.darly.sysbase.dictionary.cache;\r\n\r\nimport cn.com.darly.sysbase.dictionary.bean.Dic;\r\nimport cn.com.darly.sysbase.dictionary.service.DicService;\r\nimport cn.com.darly.sysbase.framework.cache.BaseCache;\r\nimport cn.com.darly.sysbase.framework.cache.Cache;\r\nimport cn.com.darly.sysbase.framework.obs.ObsApplication;\r\nimport cn.com.darly.sysbase.syslog.Logger;\r\nimport com.google.common.collect.HashBasedTable;\r\nimport com.google.common.collect.Table;\r\n\r\nimport javax.annotation.Resource;\r\nimport java.util.Iterator;\r\nimport java.util.List;\r\n\r\n/**\r\n * Author : ZhangYuHui\r\n * Date : 2017/10/17\r\n * TODO : 系统数据字典缓存类 数据字典缓存\r\n */\r\n\r\npublic class DicCache implements BaseCache {\r\n    private final Logger logger = new Logger(DicCache.class);\r\n    @Resource\r\n    Cache cache;\r\n\r\n    @Resource\r\n    DicService dicService;\r\n\r\n    @Override\r\n    public String getCacheKey() {\r\n        return DIC_CACHE;\r\n    }\r\n\r\n    @Override\r\n    public void init() throws Exception {\r\n        List&lt;Dic&gt; dics = dicService.findAll();\r\n        Table&lt;String, String, String&gt; table = HashBasedTable.create();\r\n        Table&lt;String, String, String&gt; table1 = HashBasedTable.create();\r\n        for (Dic dic : dics) {\r\n            table.put(dic.getCode(),dic.getType().toString(),dic.getName());\r\n            table1.put(dic.getName(),dic.getType().toString(),dic.getCode());\r\n        }\r\n        cache.put(Dic.class.getSimpleName(),table);\r\n        cache.put(\"dic_name^code_cache\",table1);\r\n        logger.info(\"[数据字典] 缓存初始化完成\");\r\n    }\r\n}\r\n        </pre>\r\n    </div>');
INSERT INTO `study_dic` VALUES ('1304260822434698b246dca4ffc486a2', '2', '如何关联数据库？', '    <div>\r\n        <h3>数据库 <small>数据库配置信息</small></h3>\r\n        <p>\r\n            系统为Spring MVC + Spring Security + Mybatis 进行开发的一个小项目。<br>\r\n            在这里先查看数据库配置操作记录。<br>\r\n            数据库这里使用的是MySQL数据库，并初期建立几张表：\r\n        </p>\r\n        <div class=\"table-responsive\">\r\n            <table class=\"table table-striped table-bordered\">\r\n                <thead>\r\n                <tr >\r\n                    <th style=\"text-align: center\">表名</th>\r\n                    <th style=\"text-align: center\">表字段</th>\r\n                    <th style=\"text-align: center\">注解</th>\r\n                </tr>\r\n                </thead>\r\n                <tbody>\r\n                <tr style=\"text-align: center\">\r\n                    <td>sys_dic</td>\r\n                    <td>ID;CODE;NAME;TYPE;REMARK</td>\r\n                    <td>系统一些不变熟悉，系统字典</td>\r\n                </tr>\r\n                <tr style=\"text-align: center\">\r\n                    <td>sys_user</td>\r\n                    <td>ID;ACCOUNT;PWD;NAME;DISABLED;MOBILE;<br>DEPTID;MEMO;SKIN;IPRULE;CREATEBY;<br>SET_VISIT_TIMES;LIMIT_VISIT_TIMES;<br>PUSER_ID;DEVICE_ID</td>\r\n                    <td>用户信息表，包含一些固定的用户资料信息</td>\r\n                </tr>\r\n                <tr style=\"text-align: center\">\r\n                    <td>sys_login_log</td>\r\n                    <td>ID;OPERATOR_ID;IP_ADDRESS;OPERATOR_NAME;<br>TYPE;LOG_LEVEL;OPERATION_TIME;<br>CONTENT;CREATE_DATE;CREATE_BY;<br>UPDATE_BY;UPDATE_DATE;STATUS</td>\r\n                    <td>用户登录，系统日志记录表</td>\r\n                </tr>\r\n                <tr style=\"text-align: center\">\r\n                    <td>sys_user_role</td>\r\n                    <td>ROLEID;USERID</td>\r\n                    <td>用户角色权限管理</td>\r\n                </tr>\r\n                <tr style=\"text-align: center\">\r\n                    <td>sys_resource</td>\r\n                    <td>ID;TYPE;NAME;LEAF;DISABLED;CODE;ICON;<br>SORT_ORDER;CONTENT;MEMO;CREATE_DATE;<br>CREATE_BY;UPDATE_BY;UPDATE_DATE;STATUS;<br>PARENTID;MODULE_CODE\r\n                    </td>\r\n                    <td>用户角色权限管理</td>\r\n                </tr>\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n        <p class=\"text-left\">系统方面需要作出很多配置：</p>\r\n        <p>首先在web.xml中进行配置：<code>&lt;web.xml&gt;</code></p>\r\n        <pre>\r\n&lt;!DOCTYPE web-app PUBLIC\r\n        \"-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN\"\r\n        \"http://java.sun.com/dtd/web-app_2_3.dtd\" &gt;\r\n&lt;web-app xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n         xmlns=\"http://java.sun.com/xml/ns/javaee\"\r\n         xsi:schemaLocation=\"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd\"\r\n         version=\"3.0\"&gt;\r\n  &lt;!-- Spring MVC --&gt;\r\n  &lt;context-param&gt;\r\n    &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;\r\n    &lt;param-value&gt;\r\n      classpath*:/sap-mybatis.xml,\r\n      classpath*:/sap-security.xml,\r\n      classpath*:/sap-ehcache.xml,\r\n    &lt;/param-value&gt;\r\n  &lt;/context-param&gt;\r\n    &lt;!-- develop|release --&gt;\r\n  &lt;context-param&gt;\r\n    &lt;param-name&gt;run.mode&lt;/param-name&gt;\r\n    &lt;param-value&gt;develop&lt;/param-value&gt;\r\n  &lt;/context-param&gt;\r\n  &lt;context-param&gt;\r\n    &lt;param-name&gt;webAppRootKey&lt;/param-name&gt;\r\n    &lt;param-value&gt;ssms.root&lt;/param-value&gt;\r\n  &lt;/context-param&gt;\r\n    &lt;!-- Spring Security --&gt;\r\n  &lt;filter&gt;\r\n    &lt;filter-name&gt;springSecurityFilterChain&lt;/filter-name&gt;\r\n    &lt;filter-class&gt;org.springframework.web.filter.DelegatingFilterProxy\r\n    &lt;/filter-class&gt;\r\n    &lt;async-supported&gt;true&lt;/async-supported&gt;\r\n  &lt;/filter&gt;\r\n\r\n  &lt;filter-mapping&gt;\r\n    &lt;filter-name&gt;springSecurityFilterChain&lt;/filter-name&gt;\r\n    &lt;url-pattern&gt;/*&lt;/url-pattern&gt;\r\n    &lt;dispatcher&gt;REQUEST&lt;/dispatcher&gt;\r\n    &lt;dispatcher&gt;FORWARD&lt;/dispatcher&gt;\r\n  &lt;/filter-mapping&gt;\r\n\r\n    &lt;!-- filters --&gt;\r\n  &lt;servlet&gt;\r\n    &lt;servlet-name&gt;mvc-dispatcher&lt;/servlet-name&gt;\r\n    &lt;servlet-class&gt;\r\n      org.springframework.web.servlet.DispatcherServlet\r\n    &lt;/servlet-class&gt;\r\n    &lt;init-param&gt;\r\n      &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;\r\n      &lt;param-value&gt;classpath*:sap-servlet.xml&lt;/param-value&gt;\r\n    &lt;/init-param&gt;\r\n    &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;\r\n\r\n  &lt;/servlet&gt;\r\n  &lt;servlet-mapping&gt;\r\n    &lt;servlet-name&gt;mvc-dispatcher&lt;/servlet-name&gt;\r\n    &lt;url-pattern&gt;/&lt;/url-pattern&gt;\r\n  &lt;/servlet-mapping&gt;\r\n\r\n  &lt;filter&gt;\r\n    &lt;filter-name&gt;encodingFilter&lt;/filter-name&gt;\r\n    &lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;/filter-class&gt;\r\n    &lt;async-supported&gt;true&lt;/async-supported&gt;\r\n    &lt;init-param&gt;\r\n      &lt;param-name&gt;encoding&lt;/param-name&gt;\r\n      &lt;param-value&gt;UTF-8&lt;/param-value&gt;\r\n    &lt;/init-param&gt;\r\n    &lt;init-param&gt;\r\n      &lt;param-name&gt;forceEncoding&lt;/param-name&gt;\r\n      &lt;param-value&gt;true&lt;/param-value&gt;\r\n    &lt;/init-param&gt;\r\n  &lt;/filter&gt;\r\n\r\n  &lt;filter-mapping&gt;\r\n    &lt;filter-name&gt;encodingFilter&lt;/filter-name&gt;\r\n    &lt;url-pattern&gt;/*&lt;/url-pattern&gt;\r\n  &lt;/filter-mapping&gt;\r\n  &lt;listener&gt;\r\n    &lt;listener-class&gt;org.springframework.web.util.Log4jConfigListener&lt;/listener-class&gt;\r\n  &lt;/listener&gt;\r\n  &lt;listener&gt;\r\n    &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;\r\n  &lt;/listener&gt;\r\n\r\n  &lt;listener&gt;\r\n    &lt;listener-class&gt;cn.com.darly.sysbase.framework.listener.SystemInitListener&lt;/listener-class&gt;\r\n  &lt;/listener&gt;\r\n  &lt;listener&gt;\r\n    &lt;listener-class&gt;org.springframework.security.web.session.HttpSessionEventPublisher&lt;/listener-class&gt;\r\n  &lt;/listener&gt;\r\n\r\n  &lt;listener&gt;\r\n    &lt;listener-class&gt;org.springframework.web.util.IntrospectorCleanupListener&lt;/listener-class&gt;\r\n  &lt;/listener&gt;\r\n\r\n  &lt;listener&gt;\r\n    &lt;listener-class&gt;org.springframework.web.context.request.RequestContextListener&lt;/listener-class&gt;\r\n  &lt;/listener&gt;\r\n\r\n  &lt;error-page&gt;\r\n    &lt;exception-type&gt;java.lang.Exception&lt;/exception-type&gt;\r\n    &lt;location&gt;/WEB-INF/jsp/error/500.jsp&lt;/location&gt;\r\n  &lt;/error-page&gt;\r\n  &lt;error-page&gt;\r\n    &lt;exception-type&gt;java.net.SocketException&lt;/exception-type&gt;\r\n    &lt;location&gt;/WEB-INF/jsp/error/db_error.jsp&lt;/location&gt;\r\n  &lt;/error-page&gt;\r\n  &lt;error-page&gt;\r\n    &lt;exception-type&gt;java.lang.Throwable&lt;/exception-type&gt;\r\n    &lt;location&gt;/WEB-INF/jsp/error/500.jsp&lt;/location&gt;\r\n  &lt;/error-page&gt;\r\n  &lt;error-page&gt;\r\n    &lt;error-code&gt;500&lt;/error-code&gt;\r\n    &lt;location&gt;/WEB-INF/jsp/error/500.jsp&lt;/location&gt;\r\n  &lt;/error-page&gt;\r\n  &lt;error-page&gt;\r\n    &lt;error-code&gt;404&lt;/error-code&gt;\r\n    &lt;location&gt;/WEB-INF/jsp/error/404.jsp&lt;/location&gt;\r\n  &lt;/error-page&gt;\r\n  &lt;error-page&gt;\r\n    &lt;error-code&gt;403&lt;/error-code&gt;\r\n    &lt;location&gt;/WEB-INF/jsp/error/403.jsp&lt;/location&gt;\r\n  &lt;/error-page&gt;\r\n\r\n  &lt;context-param&gt;\r\n    &lt;param-name&gt;spring.profiles.active&lt;/param-name&gt;\r\n    &lt;param-value&gt;dev&lt;/param-value&gt;\r\n  &lt;/context-param&gt;\r\n  &lt;context-param&gt;\r\n    &lt;param-name&gt;spring.profiles.default&lt;/param-name&gt;\r\n    &lt;param-value&gt;dev&lt;/param-value&gt;\r\n  &lt;/context-param&gt;\r\n  &lt;context-param&gt;\r\n    &lt;param-name&gt;spring.liveBeansView.mbeanDomain&lt;/param-name&gt;\r\n    &lt;param-value&gt;dev&lt;/param-value&gt;\r\n  &lt;/context-param&gt;\r\n\r\n  &lt;context-param&gt;\r\n    &lt;param-name&gt;webAppRootKey&lt;/param-name&gt;\r\n    &lt;param-value&gt;epms.root&lt;/param-value&gt;\r\n  &lt;/context-param&gt;\r\n  &lt;servlet-mapping&gt;\r\n    &lt;servlet-name&gt;default&lt;/servlet-name&gt;\r\n    &lt;url-pattern&gt;*.jpg&lt;/url-pattern&gt;\r\n  &lt;/servlet-mapping&gt;\r\n  &lt;servlet-mapping&gt;\r\n    &lt;servlet-name&gt;default&lt;/servlet-name&gt;\r\n    &lt;url-pattern&gt;*.png&lt;/url-pattern&gt;\r\n  &lt;/servlet-mapping&gt;\r\n  &lt;servlet-mapping&gt;\r\n    &lt;servlet-name&gt;default&lt;/servlet-name&gt;\r\n    &lt;url-pattern&gt;*.gif&lt;/url-pattern&gt;\r\n  &lt;/servlet-mapping&gt;\r\n  &lt;servlet-mapping&gt;\r\n    &lt;servlet-name&gt;default&lt;/servlet-name&gt;\r\n    &lt;url-pattern&gt;*.swf&lt;/url-pattern&gt;\r\n  &lt;/servlet-mapping&gt;\r\n  &lt;servlet-mapping&gt;\r\n    &lt;servlet-name&gt;default&lt;/servlet-name&gt;\r\n    &lt;url-pattern&gt;*.js&lt;/url-pattern&gt;\r\n  &lt;/servlet-mapping&gt;\r\n  &lt;servlet-mapping&gt;\r\n    &lt;servlet-name&gt;default&lt;/servlet-name&gt;\r\n    &lt;url-pattern&gt;*.css&lt;/url-pattern&gt;\r\n  &lt;/servlet-mapping&gt;\r\n  &lt;servlet-mapping&gt;\r\n    &lt;servlet-name&gt;default&lt;/servlet-name&gt;\r\n    &lt;url-pattern&gt;*.pdf&lt;/url-pattern&gt;\r\n  &lt;/servlet-mapping&gt;\r\n  &lt;servlet-mapping&gt;\r\n    &lt;servlet-name&gt;default&lt;/servlet-name&gt;\r\n    &lt;url-pattern&gt;*.html&lt;/url-pattern&gt;\r\n  &lt;/servlet-mapping&gt;\r\n  &lt;servlet-mapping&gt;\r\n    &lt;servlet-name&gt;default&lt;/servlet-name&gt;\r\n    &lt;url-pattern&gt;*.htm&lt;/url-pattern&gt;\r\n  &lt;/servlet-mapping&gt;\r\n  &lt;servlet-mapping&gt;\r\n    &lt;servlet-name&gt;default&lt;/servlet-name&gt;\r\n    &lt;url-pattern&gt;*.mp3&lt;/url-pattern&gt;\r\n  &lt;/servlet-mapping&gt;\r\n  &lt;servlet-mapping&gt;\r\n    &lt;servlet-name&gt;default&lt;/servlet-name&gt;\r\n    &lt;url-pattern&gt;*.rar&lt;/url-pattern&gt;\r\n  &lt;/servlet-mapping&gt;\r\n  &lt;servlet-mapping&gt;\r\n    &lt;servlet-name&gt;default&lt;/servlet-name&gt;\r\n    &lt;url-pattern&gt;*.zip&lt;/url-pattern&gt;\r\n  &lt;/servlet-mapping&gt;\r\n  &lt;servlet-mapping&gt;\r\n    &lt;servlet-name&gt;default&lt;/servlet-name&gt;\r\n    &lt;url-pattern&gt;*.ico&lt;/url-pattern&gt;\r\n  &lt;/servlet-mapping&gt;\r\n  &lt;servlet-mapping&gt;\r\n    &lt;servlet-name&gt;default&lt;/servlet-name&gt;\r\n    &lt;url-pattern&gt;*.exe&lt;/url-pattern&gt;\r\n  &lt;/servlet-mapping&gt;\r\n  &lt;servlet-mapping&gt;\r\n    &lt;servlet-name&gt;default&lt;/servlet-name&gt;\r\n    &lt;url-pattern&gt;*.eot&lt;/url-pattern&gt;\r\n  &lt;/servlet-mapping&gt;\r\n  &lt;servlet-mapping&gt;\r\n    &lt;servlet-name&gt;default&lt;/servlet-name&gt;\r\n    &lt;url-pattern&gt;*.svg&lt;/url-pattern&gt;\r\n  &lt;/servlet-mapping&gt;\r\n  &lt;servlet-mapping&gt;\r\n    &lt;servlet-name&gt;default&lt;/servlet-name&gt;\r\n    &lt;url-pattern&gt;*.ttf&lt;/url-pattern&gt;\r\n  &lt;/servlet-mapping&gt;\r\n  &lt;servlet-mapping&gt;\r\n    &lt;servlet-name&gt;default&lt;/servlet-name&gt;\r\n    &lt;url-pattern&gt;*.woff&lt;/url-pattern&gt;\r\n  &lt;/servlet-mapping&gt;\r\n  &lt;servlet-mapping&gt;\r\n    &lt;servlet-name&gt;default&lt;/servlet-name&gt;\r\n    &lt;url-pattern&gt;*.apk&lt;/url-pattern&gt;\r\n  &lt;/servlet-mapping&gt;\r\n  &lt;servlet-mapping&gt;\r\n    &lt;servlet-name&gt;default&lt;/servlet-name&gt;\r\n    &lt;url-pattern&gt;*.mp4&lt;/url-pattern&gt;\r\n  &lt;/servlet-mapping&gt;\r\n  &lt;welcome-file-list&gt;\r\n    &lt;welcome-file&gt;index.jsp&lt;/welcome-file&gt;\r\n  &lt;/welcome-file-list&gt;\r\n  &lt;session-config&gt;\r\n    &lt;session-timeout&gt;15&lt;/session-timeout&gt;\r\n  &lt;/session-config&gt;\r\n&lt;/web-app&gt;\r\n        </pre>\r\n        <p>主要的XML文件：<code>&lt;sap-mybatis.xml&gt;</code></p>\r\n        <pre>\r\n&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;\r\n&lt;beans xmlns=\"http://www.springframework.org/schema/beans\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n       xmlns:context=\"http://www.springframework.org/schema/context\"\r\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\r\nhttp://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd\"&gt;\r\n\r\n&lt;!-- 自动扫描 --&gt;\r\n&lt;context:component-scan base-package=\"cn.com.darly.*\" /&gt;\r\n            &lt;!-- 引入配置文件 --&gt;\r\n&lt;bean id=\"propertyConfigurer\"\r\n      class=\"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer\"&gt;\r\n    &lt;property name=\"location\" value=\"classpath:spring-jdbc.properties\" /&gt;\r\n&lt;/bean&gt;\r\n\r\n&lt;bean id=\"dataSource\" class=\"org.apache.commons.dbcp.BasicDataSource\"\r\n      destroy-method=\"close\"&gt;\r\n    &lt;property name=\"driverClassName\" value=\"${driver}\" /&gt;\r\n    &lt;property name=\"url\" value=\"${url}\" /&gt;\r\n    &lt;property name=\"username\" value=\"${username}\" /&gt;\r\n    &lt;property name=\"password\" value=\"${password}\" /&gt;\r\n\r\n    &lt;!-- 配置连接池的初始值 --&gt;\r\n    &lt;property name=\"initialSize\" value=\"1\" /&gt;\r\n    &lt;!-- 连接池的最大值 --&gt;\r\n    &lt;!-- &lt;property name=\"maxActive\" value=\"500\"/&gt; --&gt;\r\n    &lt;!-- 最大空闲时，当经过一个高峰之后，连接池可以将一些用不到的连接释放，一直减少到maxIdle为止 --&gt;\r\n    &lt;!-- &lt;property name=\"maxIdle\" value=\"2\"/&gt; --&gt;\r\n    &lt;!-- 当最小空闲时，当连接少于minIdle时会自动去申请一些连接 --&gt;\r\n    &lt;property name=\"minIdle\" value=\"1\" /&gt;\r\n    &lt;property name=\"maxActive\" value=\"100\" /&gt;\r\n    &lt;property name=\"maxIdle\" value=\"20\" /&gt;\r\n    &lt;property name=\"maxWait\" value=\"1000\" /&gt;\r\n&lt;/bean&gt;\r\n\r\n            &lt;!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 --&gt;\r\n&lt;bean id=\"sqlSessionFactory\" class=\"org.mybatis.spring.SqlSessionFactoryBean\"&gt;\r\n    &lt;property name=\"dataSource\" ref=\"dataSource\" /&gt;\r\n    &lt;!-- 自动扫描mapping.xml文件 --&gt;\r\n    &lt;property name=\"mapperLocations\" value=\"classpath:cn/com/darly/**/dao/*.xml\"/&gt;\r\n\r\n    &lt;!--&lt;property name=\"plugins\"&gt;--&gt;\r\n    &lt;!--&lt;array&gt;--&gt;\r\n    &lt;!--&lt;ref bean=\"pageInterceptor\"/&gt;--&gt;\r\n    &lt;!--&lt;/array&gt;--&gt;\r\n    &lt;!--&lt;/property&gt;--&gt;\r\n    &lt;!--&lt;property name=\"configLocation\" value=\"classpath:sap-config.xml\"/&gt;--&gt;\r\n&lt;/bean&gt;\r\n\r\n            &lt;!-- DAO接口所在包名，Spring会自动查找其下的类 --&gt;\r\n&lt;bean class=\"org.mybatis.spring.mapper.MapperScannerConfigurer\"&gt;\r\n    &lt;property name=\"basePackage\" value=\"cn.com.darly.**.dao\" /&gt;\r\n    &lt;property name=\"sqlSessionFactoryBeanName\" value=\"sqlSessionFactory\"&gt;&lt;/property&gt;\r\n&lt;/bean&gt;\r\n\r\n            &lt;!-- (事务管理)transaction manager, use JtaTransactionManager for global tx --&gt;\r\n&lt;bean id=\"transactionManager\"\r\n      class=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\"&gt;\r\n    &lt;property name=\"dataSource\" ref=\"dataSource\" /&gt;\r\n&lt;/bean&gt;\r\n\r\n            &lt;!--&lt;bean id=\"pageInterceptor\" class=\"com.xiangxun.atms.framework.mybatis.interceptor.PageInterceptor\"&gt;&lt;/bean&gt;--&gt;\r\n&lt;/beans&gt;\r\n        </pre>\r\n        <p>数据库中存储数据可定义为枚举类型，则需要在对应的mapper中添加对应标记。如下：</p>\r\n        <p>本数据字典中包含DicType类型，字段名为TYPE，则需要在 <code>&lt;DicMapper.xml&gt;</code></p>\r\n        <pre>\r\n&lt;id column=\"ID\" property=\"id\" jdbcType=\"VARCHAR\" /&gt;\r\n&lt;result column=\"CODE\" property=\"code\" jdbcType=\"VARCHAR\" /&gt;\r\n&lt;result column=\"NAME\" property=\"name\" jdbcType=\"VARCHAR\" /&gt;\r\n&lt;result column=\"TYPE\" property=\"type\" javaType=\"cn.com.darly.sysbase.dictionary.type.DicType\"\r\n        jdbcType=\"VARCHAR\" typeHandler=\"cn.com.darly.sysbase.dictionary.type.DicTypeHandler\" /&gt;\r\n&lt;result column=\"REMARK\" property=\"remark\" jdbcType=\"VARCHAR\" /&gt;\r\n        </pre>\r\n        <p>主要的数据库PROPERTIES文件：<code>&lt;spring-jdbc.properties&gt;</code></p>\r\n        <pre>\r\ndriver=com.mysql.jdbc.Driver\r\nurl=jdbc:mysql://localhost:3306/darlybase\r\nusername=root\r\npassword=darly\r\n#定义初始连接数\r\ninitialSize=1\r\n#定义最大连接数\r\nmaxActive=20\r\n#定义最大空闲\r\nmaxIdle=20\r\n#定义最小空闲\r\nminIdle=1\r\n#定义最长等待时间\r\nmaxWait=60000\r\n        </pre>\r\n    </div>');
INSERT INTO `study_dic` VALUES ('1304260822434698b246dca4ffc486a3', '3', '如何进行接口调用？', '    <p class=\"text-left\">后台展示接口比较好弄</p>');
INSERT INTO `study_dic` VALUES ('1304260822434698b246dca4ffc486a4', '4', 'WebSocket建立机制？', '    <p class=\"text-center\"> <h3>第一部分技巧：WebSocket长连接绘话的建立 <small>建立WebSocket长连接的步骤和方法</small></h3></p>\r\n    <p class=\"text-left\">WebSocket是现在比较好的，服务端消息推送机制，主要工作由服务端进行操作</p>\r\n    <p class=\"text-left\">第一步：修改pom.xml：<code>&lt;pom.xml&gt;</code></p>\r\n    <pre>\r\n&lt;spring.version&gt;4.2.5.RELEASE&lt;/spring.version&gt;\r\n&lt;!-- 项目中添加 websocket 长连接  spring4.0以后加入了对websocket技术的支持  实现全双工通信的服务器向客户端推的互联网技术--&gt;\r\n&lt;dependency&gt;\r\n    &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;\r\n    &lt;artifactId&gt;jackson-core&lt;/artifactId&gt;\r\n    &lt;version&gt;2.3.0&lt;/version&gt;\r\n&lt;/dependency&gt;\r\n&lt;dependency&gt;\r\n    &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;\r\n    &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;\r\n    &lt;version&gt;2.3.0&lt;/version&gt;\r\n&lt;/dependency&gt;\r\n&lt;dependency&gt;\r\n    &lt;groupId&gt;org.springframework&lt;/groupId&gt;\r\n    &lt;artifactId&gt;spring-websocket&lt;/artifactId&gt;\r\n    &lt;version&gt;${spring.version}&lt;/version&gt;\r\n&lt;/dependency&gt;\r\n&lt;dependency&gt;\r\n    &lt;groupId&gt;org.springframework&lt;/groupId&gt;\r\n    &lt;artifactId&gt;spring-messaging&lt;/artifactId&gt;\r\n    &lt;version&gt;${spring.version}&lt;/version&gt;\r\n&lt;/dependency&gt;\r\n    </pre>\r\n    <p class=\"text-left\">将Spring框架的版本提升较高的版本 低版本不支持WebSocket</p>\r\n    <br>\r\n    <p class=\"text-left\">第二步：建立WebSocketConfig.java配置类</p>\r\n    <pre>\r\npackage cn.com.darly.sysbase.websocket.config;\r\n\r\nimport cn.com.darly.sysbase.websocket.handler.ChatWebSocketHandler;\r\nimport cn.com.darly.sysbase.websocket.handler.SystemWebSocketHandler;\r\nimport org.springframework.context.annotation.Bean;\r\nimport org.springframework.context.annotation.Configuration;\r\nimport org.springframework.web.servlet.config.annotation.EnableWebMvc;\r\nimport org.springframework.web.socket.WebSocketHandler;\r\nimport org.springframework.web.socket.config.annotation.EnableWebSocket;\r\nimport org.springframework.web.socket.config.annotation.WebSocketConfigurer;\r\nimport org.springframework.web.socket.config.annotation.WebSocketHandlerRegistry;\r\n\r\n/**\r\n * Author : ZhangYuHui\r\n * Date : 2017/10/24\r\n * TODO : WebSocket 註冊的連接\r\n */\r\n@Configuration\r\n@EnableWebSocket\r\n@EnableWebMvc\r\npublic class WebSocketConfig implements WebSocketConfigurer {\r\n    @Override\r\n    public void registerWebSocketHandlers(WebSocketHandlerRegistry registry) {\r\n        registry.addHandler(systemWebSocketHandler(), \"/websocket/socket\").withSockJS();\r\n        registry.addHandler(chatWebSocketHandler(), \"/websocket/chat\").withSockJS();\r\n    }\r\n\r\n    @Bean\r\n    public WebSocketHandler systemWebSocketHandler() {\r\n        return new SystemWebSocketHandler();\r\n    }\r\n    @Bean\r\n    public WebSocketHandler chatWebSocketHandler() {\r\n        return new ChatWebSocketHandler();\r\n    }\r\n}\r\n\r\n    </pre>\r\n    <p class=\"text-left\">主要配置对接到jsp的连接url，连接功能如下javascript展示</p>\r\n    <pre>\r\n&lt;script type=\"text/javascript\"&gt;\r\n    $(function () {\r\n        var websocket;\r\n        var left = true;\r\n\r\n        websocket = new SockJS(\"${root}/websocket/chat\");\r\n        websocket.onopen = function (evnt) {\r\n            $(\"#tou\").html(\"链接服务器成功!\")\r\n        };\r\n        websocket.onmessage = function (evnt) {\r\n            console.log(evnt.data);\r\n            var con = document.getElementById(\'msg\');\r\n            var p = document.createElement(\'p\');\r\n            if (evnt.data.indexOf(\"userTip:\") &gt;= 0) {\r\n                if (evnt.data.indexOf(\"${userName}\") &gt;= 0) {\r\n                    //在这里判断是否是用户本身。将left修改为false\r\n                    left = false;\r\n                }else {\r\n                    left = true;\r\n                }\r\n            }\r\n            if (left){\r\n                p.style.textAlign = \"left\";\r\n            }else {\r\n                p.style.textAlign = \"right\";\r\n            }\r\n            if (evnt.data.indexOf(\"userTip:\") &gt;= 0) {\r\n                p.style.wordWrap = \'break-word\';\r\n                var name = evnt.data.split(\"userTip:\")[1];\r\n                p.appendChild(document.createTextNode(name));\r\n            } else {\r\n                p.style.wordWrap = \'break-word\';\r\n                p.style.marginLeft = \'20px\';\r\n                p.appendChild(document.createTextNode(evnt.data));\r\n            }\r\n            con.appendChild(p);\r\n            con.scrollTop = con.scrollHeight;\r\n        };\r\n        websocket.onerror = function (evnt) {\r\n        };\r\n        websocket.onclose = function (evnt) {\r\n            $(\"#tou\").html(\"与服务器断开了链接!\")\r\n        }\r\n        $(\'#send\').bind(\'click\', function () {\r\n            var ids =  document.getElementById(\"dropselect\").getAttribute(\"ids\");\r\n            send(ids);\r\n        });\r\n\r\n\r\n        function send(ids) {\r\n            if (websocket != null) {\r\n                var message = document.getElementById(\'message\').value;\r\n                if(ids == \"null\") {\r\n                    websocket.send(message);\r\n                }else {\r\n                    websocket.send(ids + \"--&gt;splitmessage&lt;--\" + message);\r\n                }\r\n            } else {\r\n                alert(\'未与服务器链接.\');\r\n            }\r\n        }\r\n    });\r\n\r\n    $(document).keyup(function (e) {//捕获文档对象的按键弹起事件\r\n        if (e.keyCode == 13) {//按键信息对象以参数的形式传递进来了\r\n            //此处编写用户敲回车后的代码\r\n            var ids =  document.getElementById(\"dropselect\").getAttribute(\"ids\");\r\n            send(ids);\r\n        }\r\n    });\r\n&lt;/script&gt;\r\n    </pre>\r\n    <br>\r\n    <p class=\"text-left\">第三步：ChatWebSocketHandler.java连接用户，发送消息功能模块</p>\r\n    <pre>\r\npackage cn.com.darly.sysbase.websocket.handler;\r\n\r\nimport cn.com.darly.sysbase.security.UserDetials;\r\nimport cn.com.darly.sysbase.syslog.Logger;\r\nimport org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\r\nimport org.springframework.web.socket.CloseStatus;\r\nimport org.springframework.web.socket.TextMessage;\r\nimport org.springframework.web.socket.WebSocketSession;\r\nimport org.springframework.web.socket.handler.TextWebSocketHandler;\r\n\r\nimport java.io.IOException;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.*;\r\n\r\n/**\r\n * Author : ZhangYuHui\r\n * Date : 2017/10/24\r\n * TODO :\r\n */\r\npublic class ChatWebSocketHandler extends TextWebSocketHandler {\r\n    private Logger log = new Logger(ChatWebSocketHandler.class);\r\n\r\n    //在线用户列表\r\n    private static final Map&lt;String, WebSocketSession&gt; chats;\r\n\r\n    static {\r\n        chats = new HashMap&lt;String, WebSocketSession&gt;();\r\n    }\r\n\r\n    @Override\r\n    public void afterConnectionEstablished(WebSocketSession webSocketSession) throws Exception {\r\n        Object context = webSocketSession.getPrincipal();\r\n        if (context != null) {\r\n            UsernamePasswordAuthenticationToken toke = (UsernamePasswordAuthenticationToken) context;\r\n            UserDetials operatorDetails = (UserDetials) toke.getPrincipal();\r\n            chats.put(operatorDetails.getId(), webSocketSession);\r\n        }\r\n        log.info(\"------&gt;[方法 afterConnectionEstablished 运行中...] users的长度：\" + chats.size());\r\n    }\r\n\r\n    @Override\r\n    protected void handleTextMessage(WebSocketSession session, TextMessage webSocketMessage) throws Exception {\r\n        Object context = session.getPrincipal();\r\n        TextMessage message = null;\r\n        UserDetials operatorDetails = null;\r\n        if (context != null) {\r\n            UsernamePasswordAuthenticationToken toke = (UsernamePasswordAuthenticationToken) context;\r\n            operatorDetails = (UserDetials) toke.getPrincipal();\r\n            SimpleDateFormat fo = new SimpleDateFormat(\"YYYY-MM-dd HH:mm:ss\");\r\n            StringBuffer buffer = new StringBuffer();\r\n            buffer.append(\"userTip:\");\r\n            buffer.append(operatorDetails.getRealName());\r\n            buffer.append(\"    \");\r\n            buffer.append(fo.format(new Date()));\r\n            message = new TextMessage(buffer.toString());\r\n        }\r\n        String msg = webSocketMessage.getPayload();\r\n        if (msg.contains(\"--&gt;splitmessage&lt;--\")) {\r\n            //针对某个用户的信息\r\n            String id = msg.split(\"--&gt;splitmessage&lt;--\")[0];\r\n            String word = msg.split(\"--&gt;splitmessage&lt;--\")[1];\r\n            List&lt;String&gt; ids = new ArrayList&lt;String&gt;();\r\n            ids.add(operatorDetails.getId());\r\n            ids.add(id);\r\n            sendChatMessageToUser(ids, message);\r\n            sendChatMessageToUser(ids, new TextMessage(word));\r\n        } else {\r\n            //群组信息\r\n            sendChatMessageToAllUsers(message);\r\n            sendChatMessageToAllUsers(webSocketMessage);\r\n        }\r\n        log.debug(\"------&gt;[方法 handleTextMessage 运行中...]\");\r\n    }\r\n\r\n    @Override\r\n    public void handleTransportError(WebSocketSession webSocketSession, Throwable throwable) throws Exception {\r\n        if (webSocketSession.isOpen()) {\r\n            webSocketSession.close();\r\n        }\r\n        Object context = webSocketSession.getPrincipal();\r\n        if (context != null) {\r\n            UsernamePasswordAuthenticationToken toke = (UsernamePasswordAuthenticationToken) context;\r\n            UserDetials operatorDetails = (UserDetials) toke.getPrincipal();\r\n            chats.remove(operatorDetails.getId());\r\n        }\r\n        log.info(\"------&gt;[方法 handleTransportError 运行中...]\");\r\n    }\r\n\r\n    @Override\r\n    public void afterConnectionClosed(WebSocketSession webSocketSession, CloseStatus closeStatus) throws Exception {\r\n        Object context = webSocketSession.getPrincipal();\r\n        if (context != null) {\r\n            UsernamePasswordAuthenticationToken toke = (UsernamePasswordAuthenticationToken) context;\r\n            UserDetials operatorDetails = (UserDetials) toke.getPrincipal();\r\n            chats.remove(operatorDetails.getId());\r\n        }\r\n        log.debug(\"------&gt;[方法 afterConnectionClosed 运行中...]\");\r\n    }\r\n\r\n    @Override\r\n    public boolean supportsPartialMessages() {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * 发送信息给指定用户\r\n     */\r\n    private void sendChatMessageToUser(List&lt;String&gt; clientId, TextMessage message) {\r\n        WebSocketSession session = null;\r\n        for (String id : clientId) {\r\n            if (chats.get(id) == null) {\r\n                continue;\r\n            }\r\n            session = chats.get(id);\r\n            if (session.isOpen()) {\r\n                try {\r\n                    session.sendMessage(message);\r\n                } catch (IOException e) {\r\n                    e.printStackTrace();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * 给所有在线用户发送消息\r\n     */\r\n    private void sendChatMessageToAllUsers(TextMessage message) {\r\n        Set&lt;String&gt; ids = chats.keySet();\r\n        WebSocketSession session = null;\r\n        for (String clientId : ids) {\r\n            try {\r\n                session = chats.get(clientId);\r\n                if (session.isOpen()) {\r\n                    session.sendMessage(message);\r\n                }\r\n            } catch (IOException e) {\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n    </pre>\r\n    <p class=\"text-left\">需要发送消息的地方，调用sendChatMessageToUser方法即可</p>');
INSERT INTO `study_dic` VALUES ('1304260822434698b246dca4ffc486a5', '5', 'Redis+Spring Security？', '    <div>\r\n        <h3>Reids建立 <small>Reids建立的步骤和方法</small></h3>\r\n        <p class=\"text-left\">项目实现分布式管理，解决负载均衡，框架为Nginx+Redis+SSM+Security。主要需要解决的是：Session同步的问题</p>\r\n    </div>');
INSERT INTO `study_dic` VALUES ('1304260822434698b246dca4ffc486a6', '6', 'Android控件集合演示', '\r\n<div id=\"pagecontent\">\r\n    <h4 id=\"section-Doc_lib-1_E5_B7_A5_E5_85_B7_E9_9B_86_E5_90_88Doc_E6_96_87_E6_A1_A3\">1、工具集合Doc文档<a class=\"hashlink\" href=\"#section-Doc_lib-1_E5_B7_A5_E5_85_B7_E9_9B_86_E5_90_88Doc_E6_96_87_E6_A1_A3\">#</a></h4>\r\n    <ol><li><a class=\"external\" href=\"javascript:forcommonApiDoc()\">点击查看</a>\r\n    </li><li>说明\r\n        <br>工具类集合包含已有项目的所有可用工具类汇总，详细信息链接<a class=\"external\" href=\"http://193.169.100.100:8081/nexus/content/repositories/thirdparty/com/darly/common/common/\">http://193.169.100.100:8081/nexus/content/repositories/thirdparty/com/darly/common/common/</a>\r\n        <br>使用方法想当简约时尚。\r\n        <br>第一步：在项目的build.gradle中配置maven仓库地址。\r\n        <br>第二步：在主项目的build.gradle中配置引用，例如：compile group: \'com.darly.common\', name: \'common\', version: \'1.0.0\'。\r\n        <br>第三步：在主项目的Application中进行初始化\r\n        <br>    Common.init().init(this,\"object_share\");\r\n        <br>    Common.init().initDlog(AppConst.isDebug(), \"appName\");\r\n    </li></ol><h4 id=\"section-Doc_lib-2_E6_8E_A7_E4_BB_B6_E9_9B_86_E5_90_88Doc_E6_96_87_E6_A1_A3\">2、控件集合Doc文档<a class=\"hashlink\" href=\"#section-Doc_lib-2_E6_8E_A7_E4_BB_B6_E9_9B_86_E5_90_88Doc_E6_96_87_E6_A1_A3\">#</a></h4>\r\n    <ol><li><a class=\"external\" href=\"javascript:fordviewApiDoc()\">点击查看</a>\r\n    </li><li>说明\r\n        <br>工具类集合包含已有项目的所有可用工具类汇总，详细信息链接<a class=\"external\" href=\"http://193.169.100.100:8081/nexus/content/repositories/thirdparty/com/darly/dview/dview/\">http://193.169.100.100:8081/nexus/content/repositories/thirdparty/com/darly/dview/dview/</a>\r\n        <br>使用方法想当简约时尚。\r\n        <br>第一步：在项目的build.gradle中配置maven仓库地址。\r\n        <br>第二步：在主项目的build.gradle中配置引用，例如：compile group: \'com.darly.dview\', name: \'dview\', version: \'1.0.2\'。\r\n        <br>第三步：在主项目的Application中进行初始化\r\n        <br>    DView.init().notifyInit(AppConst.isDebug(),this);\r\n    </li></ol><h4 id=\"section-Doc_lib-3GradleMaven_E7_AE_A1_E7_90_86AAR_E5_8C_85_E6_B5_81_E7_A8_8B_E8_AF_A6_E8_A7_81_E9_99_84_E4_BB_B6_E7_82_B9_E5_87_BB_E4_B8_8B_E8_BD_BD\">3、Gradle+Maven管理AAR包流程详见附件<a class=\"external\" href=\"http://193.169.100.239:9080/JSPWiki/attach/Doc_lib/AndroidGradle%E6%8F%90%E4%BA%A4%E4%BD%BF%E7%94%A8%E4%B8%AD%E5%A4%AE%E4%BB%93%E5%BA%93.docx\">点击下载</a><a class=\"hashlink\" href=\"#section-Doc_lib-3GradleMaven_E7_AE_A1_E7_90_86AAR_E5_8C_85_E6_B5_81_E7_A8_8B_E8_AF_A6_E8_A7_81_E9_99_84_E4_BB_B6_E7_82_B9_E5_87_BB_E4_B8_8B_E8_BD_BD\">#</a></h4>\r\n</div>');
